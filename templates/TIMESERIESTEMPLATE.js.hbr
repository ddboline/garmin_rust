<script>
// Set the dimensions of the canvas / graph
let margin_{{NAME}} = {top: 30, right: 20, bottom: 30, left: 60};
let width_{{NAME}} = 600 - margin_{{NAME}}.left - margin_{{NAME}}.right;
let height_{{NAME}} = 270 - margin_{{NAME}}.top - margin_{{NAME}}.bottom;

// Parse the date / time
var parseDateTime = d3.timeParse("%Y-%m-%dT%H:%M:%S%Z");

// Set the ranges
let x_{{NAME}} = d3.scaleTime().range([0, width_{{NAME}}]);
let y_{{NAME}} = d3.scaleLinear().range([height_{{NAME}}, 0]);

// Define the axes
let xAxis_{{NAME}} = d3.axisBottom(x_{{NAME}}).ticks(5);

let yAxis_{{NAME}} = d3.axisLeft(y_{{NAME}}).ticks(5);
    
// Adds the svg canvas
let svg_{{NAME}} = d3.select("body")
    .append("svg")
        .attr("width", width_{{NAME}} + margin_{{NAME}}.left + margin_{{NAME}}.right)
        .attr("height", height_{{NAME}} + margin_{{NAME}}.top + margin_{{NAME}}.bottom)
    .append("g")
        .attr("transform",
              "translate(" + margin_{{NAME}}.left + "," + margin_{{NAME}}.top + ")")
    .on("mousemove touchmove", handleMouseOverData);

svg_{{NAME}}.append("text")      // text label for chart Title
        .attr("x", width_{{NAME}} / 2 )
        .attr("y", 0 - (margin_{{NAME}}.top/2))
        .style("text-anchor", "middle")
		.style("font-size", "16px")
        .style("text-decoration", "underline")
        .text("{{EXAMPLETITLE}}");

svg_{{NAME}}.append("text")      // text label for the x-axis
        .attr("x", width_{{NAME}} / 2 )
        .attr("y",  height_{{NAME}} + margin_{{NAME}}.bottom)
        .style("text-anchor", "middle")
        .text("{{XAXIS}}");

svg_{{NAME}}.append("text")      // text label for the y-axis
        .attr("y",30 - margin_{{NAME}}.left)
        .attr("x",50 - (height_{{NAME}} / 2))
        .attr("transform", "rotate(-90)")
        .style("text-anchor", "end")
        .style("font-size", "16px")
        .text("{{YAXIS}}");

// Get the data
let data_{{NAME}} = {{{DATA}}};
data_{{NAME}}.forEach(function(d) {
    d[0] = parseDateTime(d[0]);
});

let xmax_{{NAME}} = d3.max(data_{{NAME}}, function(d) {return d[0]});
let xmin_{{NAME}} = d3.min(data_{{NAME}}, function(d) {return d[0]});
let ymax_{{NAME}} = d3.max(data_{{NAME}}, function(d) {return d[1]});
let ymin_{{NAME}} = d3.min(data_{{NAME}}, function(d) {return d[1]});

ymax_{{NAME}} = ymax_{{NAME}} + 0.1 * Math.abs(ymax_{{NAME}});
ymin_{{NAME}} = ymin_{{NAME}} - 0.1 * Math.abs(ymin_{{NAME}});

x_{{NAME}}.domain(d3.extent(data_{{NAME}}, function(d) {return d[0]; }));
y_{{NAME}}.domain([ymin_{{NAME}}, ymax_{{NAME}}]);

// Define the line
var valueline = d3.line()
    .x(function(d) { return x_{{NAME}}(d[0]); })
    .y(function(d) { return y_{{NAME}}(d[1]); });

svg_{{NAME}}.append("path").attr("class", "line").attr("d", valueline(data_{{NAME}}));

svg_{{NAME}}.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height_{{NAME}} + ")")
      .call(xAxis_{{NAME}})
	    .selectAll(".tick text")
      .call(wrap, 35);

svg_{{NAME}}.append("g").attr("class", "yaxis").call(yAxis_{{NAME}});

function wrap(text, width) {
    text.each(function() {
        var text = d3.select(this),
            words = text.text().split(/\s+/).reverse(),
            word,
            line = [],
            lineNumber = 0,
            lineHeight = 1.1, // ems
            y = text.attr("y"),
            dy = parseFloat(text.attr("dy")),
            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
        while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(" "));
        if (tspan.node().getComputedTextLength() > width) {
            line.pop();
            tspan.text(line.join(" "));
            line = [word];
            tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
        }
        }
    });
}

let rule_{{NAME}} = svg_{{NAME}}.append("g")
    .append("line")
      .attr("y1", y_{{NAME}}(ymin_{{NAME}}))
      .attr("y2", y_{{NAME}}(ymax_{{NAME}}))
      .attr("stroke", "black");

function handleMouseOverData() {
    let d = d3.mouse(this)
    let date = x_{{NAME}}.invert(d[0]);
    let heartrate = y_{{NAME}}.invert(d[1]);

    rule_{{NAME}}.attr("transform", `translate(${d[0]}, 0)`);

    svg_{{NAME}}.property("value", date).dispatch("input");
    d3.event.preventDefault();

    let data_date = d3.select('#data_date_{{NAME}}');
    if (data_date) {
        data_date.remove();
    }
    let data_heartrate = d3.select('#data_heartrate_{{NAME}}');
    if (data_heartrate) {
        data_heartrate.remove();
    }

    svg_{{NAME}}.append('text')
        .attr("id", 'data_date_{{NAME}}')
        .attr("x", function() {return x_{{NAME}}(xmin_{{NAME}}) + 30;})
        .attr("y", function() {return y_{{NAME}}(ymax_{{NAME}}) + 15;})
        .text(function() {return date;});
    svg_{{NAME}}.append('text')
        .attr("id", 'data_heartrate_{{NAME}}')
        .attr("x", function() {return x_{{NAME}}(xmin_{{NAME}}) + 30;})
        .attr("y", function() {return y_{{NAME}}(ymax_{{NAME}}) + 30;})
        .text(function() {return heartrate;});
}
</script>
